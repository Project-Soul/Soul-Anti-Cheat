"use strict";(self.webpackChunksoul_anti_cheat=self.webpackChunksoul_anti_cheat||[]).push([[391],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),h=o,f=d["".concat(c,".").concat(h)]||d[h]||p[h]||a;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8260:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],s={sidebar_position:1},c="Settings",l={unversionedId:"docs/settings",id:"docs/settings",isDocsHomePage:!1,title:"Settings",description:"You can find the Settings module in the loader folder.",source:"@site/docs/docs/settings.md",sourceDirName:"docs",slug:"/docs/settings",permalink:"/Soul-Anti-Cheat/docs/docs/settings",editUrl:"https://github.com/Project-Soul/Soul-Anti-Cheat/tree/gh-pages/docs/docs/settings.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Checks",permalink:"/Soul-Anti-Cheat/docs/docs/checks"}},u=[{value:"Whitelist",id:"whitelist",children:[]},{value:"ChecksSettings",id:"checkssettings",children:[]},{value:"Reasons",id:"reasons",children:[]}],p={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"settings"},"Settings"),(0,a.kt)("p",null,"You can find the Settings module in the loader folder."),(0,a.kt)("h2",{id:"whitelist"},"Whitelist"),(0,a.kt)("p",null,"The whitelist array must contain usernames or user ids. It decides whether or not a player should bypass the anti-cheat checks."),(0,a.kt)("h4",{id:"example"},"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'Settings.Whitelist = {\n    "proxilom", --[ Username ]\n    894920299   --[ User Id ]\n}\n')),(0,a.kt)("h2",{id:"checkssettings"},"ChecksSettings"),(0,a.kt)("p",null,"Holds a reference to ",(0,a.kt)("a",{parentName:"p",href:"https://project-soul.github.io/Soul-Anti-Cheat/docs/docs/checks"},"Checks"),"' settings."),(0,a.kt)("h4",{id:"format"},"Format:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'["CheckName"] = {\n    Disabled: boolean\n}\n')),(0,a.kt)("h4",{id:"default"},"Default:"),(0,a.kt)("p",null,"If the table doesn't hold an index equal to a ",(0,a.kt)("a",{parentName:"p",href:"https://project-soul.github.io/Soul-Anti-Cheat/docs/docs/checks"},"check"),"'s name, the settings will default to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"{\n    Disabled = false\n}\n")),(0,a.kt)("h4",{id:"example-1"},"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'Settings.ChecksSettings = {\n    ["Velocity"] = { Disabled = false }\n}\n')),(0,a.kt)("h2",{id:"reasons"},"Reasons"),(0,a.kt)("p",null,"Reasons the player will be kicked for if they trigger a check. The index can be used with global:Kick()"),(0,a.kt)("h4",{id:""}))}d.isMDXComponent=!0}}]);